name: Build host tools

on:
  pull_request:
    paths:
      - 'tools/**'
      - '.github/workflows/tools.yml'
  push:
    paths:
      - 'tools/**'
      - '.github/workflows/tools.yml'

jobs:
  build:
    name: tools-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: False
      matrix:
        include:
          - os: ubuntu-latest
            image: registry.gitlab.com/openwrt/buildbot/buildworker-3.4.1
          - os: macos-latest
            image:

    container: ${{ matrix.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: openwrt

      - name: Setup MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          echo "WORKPATH=/Volumes/OpenWrt/openwrt/" >> "$GITHUB_ENV"
          hdiutil create -size 20g -type SPARSE -fs "Case-sensitive HFS+" -volname OpenWrt OpenWrt.sparseimage
          hdiutil attach OpenWrt.sparseimage
          mv "$GITHUB_WORKSPACE/openwrt" /Volumes/OpenWrt/

          brew install \
            autoconf \
            automake \
            coreutils \
            diffutils \
            findutils \
            gawk \
            gettext \
            git-extras \
            gmp \
            gnu-getopt \
            gnu-sed \
            gnu-tar \
            grep \
            libidn2 \
            libunistring \
            m4 \
            make \
            mpfr \
            ncurses \
            openssl@1.1 \
            pcre \
            pkg-config \
            quilt \
            readline \
            wget \
            zstd

            echo "/bin" >> "$GITHUB_PATH"
            echo "/sbin/Library/Apple/usr/bin" >> "$GITHUB_PATH"
            echo "/usr/bin" >> "$GITHUB_PATH"
            echo "/usr/local/bin" >> "$GITHUB_PATH"
            echo "/usr/local/opt/coreutils/bin" >> "$GITHUB_PATH"
            echo "/usr/local/opt/findutils/libexec/gnubin" >> "$GITHUB_PATH"
            echo "/usr/local/opt/gettext/bin" >> "$GITHUB_PATH"
            echo "/usr/local/opt/gnu-getopt/bin" >> "$GITHUB_PATH"
            echo "/usr/local/opt/make/libexec/gnubin" >> "$GITHUB_PATH"
            echo "/usr/local/opt/make/libexec/gnubin" >> "$GITHUB_PATH"
            echo "/usr/sbin" >> "$GITHUB_PATH"

      - name: Make prereq
        working-directory: ${{ matrix.os == 'ubuntu-latest' && 'openwrt' || env.WORKPATH }}
        run: |
          touch .config
          echo CONFIG_DEVEL=y >> .config
          echo CONFIG_AUTOREMOVE=y >> .config
          make defconfig

      - name: Build tools MacOS
        if: ${{ matrix.os == 'macos-latest' }}
        working-directory: ${{ env.WORKPATH }}
        run: make tools/install -j$(nproc) BUILD_LOG=1

      - name: Fix permission
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          chown -R buildbot:buildbot openwrt

      - name: Build tools BuildBot Container
        if: ${{ matrix.os == 'ubuntu-latest' }}
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: make tools/install -j$(nproc) BUILD_LOG=1

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-logs
          path: ${{ matrix.os == 'ubuntu-latest' && 'openwrt/logs' || format('{0}/logs',env.WORKPATH) }}

      - name: Upload config
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os }}-config
          path: ${{ matrix.os == 'ubuntu-latest' && 'openwrt/.config' || format('{0}/.config',env.WORKPATH) }}

      - name: Archive prebuilt tools
        if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
        shell: su buildbot -c "sh -e {0}"
        working-directory: openwrt
        run: tar --mtime=now -cf tools.tar staging_dir/host build_dir/host dl

      - name: Install docker in container
        if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
        run: |
          apt update
          apt -y install lsb-release
          mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
            $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null

          apt update
          apt -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: github.event_name != 'pull_request' && matrix.os == 'ubuntu-latest'
        uses: docker/build-push-action@v3
        with:
          context: openwrt
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/tools:latest
          file: openwrt/.github/workflows/Dockerfile.tools
